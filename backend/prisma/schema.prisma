generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  role       UserRole
  status     UserStatus @default(PENDING)
  created_at DateTime   @default(now())

  patient            Patient?
  organization       Organization?
  donor              Donor?
  emailVerifications EmailVerifications[]
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum UserRole {
  PATIENT
  ORGANIZATION
  DONOR
}

model EmailVerifications {
  id                Int      @id @default(autoincrement())
  verification_code String
  is_used           Boolean  @default(false)
  created_at        DateTime @default(now())
  expires_at        DateTime

  user_id Int
  user    User @relation(fields: [user_id], references: [id])
}

model Patient {
  id                    Int            @id @default(autoincrement())
  name                  String
  Phone                 String
  age                   Int
  gender                Gender
  city                  String
  disability_type       ProstheticType
  disability_percentage Int
  medical_reports_url   String
  created_at            DateTime       @default(now())

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])

  requests Request[]
}

enum Gender {
  FEMALE
  MALE
}

enum ProstheticType {
  RIGHT_ARM
  LEFT_ARM
  RIGHT_LEG
  LEFT_LEG
  RIGHT_HAND
  LEFT_HAND
  RIGHT_FOOT
  LEFT_FOOT
}

model Organization{
  id Int @id @default(autoincrement())
  name String
  phone String
  type String
  address Json @db.JsonB
  registrationCertificate  String?   
  professionalLicense      String?
  created_at DateTime @default(now())

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])

  inventory Prosthetic_Inventory[]
  requests  Request[]
  campaigns Campaigns[]
}

model Request {
  id         Int           @id @default(autoincrement())
  status     RequestStatus @default(PENDING)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  patient_id Int
  patient    Patient @relation(fields: [patient_id], references: [id])

  organization_id Int?
  organization    Organization? @relation(fields: [organization_id], references: [id])

  inventory_id Int? @unique 
  inventory Prosthetic_Inventory? @relation(fields:[inventory_id], references:[id])
}

enum RequestStatus {
  PENDING
  INPROGRESS
  ASSIGNED
  COMPLETED
  REJECTED
}

model Prosthetic_Inventory {
  id         Int            @id @default(autoincrement())
  name       ProstheticType
  details    Json?          @db.JsonB
  updated_at DateTime       @updatedAt

  org_id Int @unique
  organization Organization @relation(fields:[org_id], references:[id])

  request Request? 
}



model Campaigns {
  id               Int             @id @default(autoincrement())
  title            String
  description      String
  target_amount    Int
  collected_amount Int
  start_date       DateTime        @default(now())
  end_date         DateTime        @default(now())
  status           CampaignsStatus

  org_id       Int
  organization Organization @relation(fields: [org_id], references: [id])

  donations Donations[]
}

enum CampaignsStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

model Donations {
  id         Int      @id @default(autoincrement())
  amount     Int
  donated_at DateTime @default(now())

  donor_id Int
  donor    Donor @relation(fields: [donor_id], references: [id])

  campaigns_id Int
  campaigns    Campaigns @relation(fields: [campaigns_id], references: [id])
}


model Donor {
  id         Int @id @default(autoincrement())
  user_id Int  @unique
  user User @relation(fields: [user_id],references: [id])
  name String
  phone String
  created_at DateTime @default(now())
  country String
  donations Donations[]
}